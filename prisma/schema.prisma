generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  user
  mod
  admin
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  role          Role      @default(admin)
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model VerificationPasswordToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  stock       Int
  isFeature   Boolean     @default(false)
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  OrderItem   OrderItem[]
  images      Image[]

  @@index([categoryId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  User       User?       @relation(fields: [userId], references: [id])
  userId     String?
  email      String      @default("")

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  orderId   String
  Order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model About {
  id        String       @id @default(uuid())
  text      String?      @db.Text
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  images    AboutImage[]
}

model AboutImage {
  id        String   @id @default(uuid())
  AboutId   String
  About     About    @relation(fields: [AboutId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([AboutId])
}

model OurHistory {
  id        String            @id @default(uuid())
  text      String?           @db.Text
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  images    OurHistoryImage[]
}

model OurHistoryImage {
  id           String     @id @default(uuid())
  OurHistoryId String
  OurHistory   OurHistory @relation(fields: [OurHistoryId], references: [id], onDelete: Cascade)
  url          String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([OurHistoryId])
}

model LearningCategory {
  id        String          @id @default(uuid())
  name      String          @unique
  text      String?         @db.Text
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  images    LearningImage[]
}

model LearningImage {
  id         String           @id @default(uuid())
  learningId String
  learning   LearningCategory @relation(fields: [learningId], references: [id], onDelete: Cascade)
  url        String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([learningId])
}
